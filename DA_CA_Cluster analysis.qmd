---
title: "DA, CA, Cluster analysis"
date: today
author: Pei-Yu Chen
format:
 pdf:
    include-in-header:
      - text: |
         \usepackage{setspace,relsize}
         \usepackage{geometry}
         \geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
mainfont: "PingFang SC"
toc: true
---

## DA

### LDA (Linear Discriminant Analysis)

資料集: iris

```{r}
library(MASS)
data(iris)
# 設定特徵 (X) 和標籤 (y)
X <- iris[, 1:4]  # 特徵
y <- iris[, 5]    # 標籤
# 創建訓練和測試數據集
set.seed(123)
train_index <- sample(1:nrow(iris), 0.7 * nrow(iris))  # 隨機抽取70%的訓練數據
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
# 使用 lda 進行 LDA
lda_model <- lda(y_train ~ ., data = data.frame(X_train, y_train))
# 進行預測
predictions <- predict(lda_model, newdata = data.frame(X_test))$class
# 混淆矩陣
confusion_matrix <- table(Predicted = predictions, Actual = y_test)
print("Confusion Matrix:")
print(confusion_matrix)
# 計算準確率
accuracy <- mean(predictions == y_test)
cat("Accuracy:", accuracy, "\n")
```


### QDA (Quadratic Discriminant Analysis)

資料集: wine

```{r}
library(rattle)
data(wine)
qda_model <- qda(Type ~ ., data = wine)
qda_pred <- predict(qda_model, wine)
predicted_classes <- qda_pred$class
confusion_matrix <- table(predicted_classes, wine$Type)
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy: ", round(accuracy, 4)))
```

### RDA (Regularized Discriminant Analysis)

資料集: iris

```{r}
library(glmnet)
data(iris)
# 設定特徵 (X) 和標籤 (y)
X <- as.matrix(iris[, 1:4])  # 特徵轉換為矩陣格式
y <- as.factor(iris[, 5])     # 標籤
# 創建訓練和測試數據集
set.seed(123)
train_index <- sample(1:nrow(X), 0.7 * nrow(X))  # 隨機抽取70%的訓練數據
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
# 使用 glmnet 進行 RDA
model <- glmnet(X_train, y_train, alpha = 0.5, family = "multinomial")
# 使用交叉驗證來選擇最佳的 lambda
cv_model <- cv.glmnet(X_train, y_train, alpha = 0.5, family = "multinomial")
# 顯示最佳的 lambda
best_lambda <- cv_model$lambda.min
cat("Best lambda:", best_lambda, "\n")
# 使用最佳的 lambda 進行預測
predictions <- predict(model, s = best_lambda, newx = X_test, type = "class")
# 混淆矩陣
confusion_matrix <- table(Predicted = predictions, Actual = y_test)
print(confusion_matrix)
# 計算準確率
accuracy <- mean(predictions == y_test)
cat("Accuracy:", accuracy, "\n")
```


## CA

### SCA (Simple Correspondence Analysis)

資料集: HairEyeColor

```{r}
# 打開一個新的繪圖設備
dev.new()

# 使用 ca package
library(ca)

# 將 HairEyeColor 資料集轉換為兩維度列聯表
hair_eye <- margin.table(HairEyeColor, 1:2)

# 簡單對應分析
sca_model <- ca(hair_eye)

print(sca_model)

# 繪製對應分析結果
plot(sca_model)
```

### MCA (Multiple Correspondence Analysis)

資料集: survey

```{r}
library(FactoMineR)
library(ggplot2)
library(ggrepel)
library(MASS)

data(survey)
# 選擇類別變數進行 MCA
mca_data <- survey[, c("Sex", "W.Hnd", "Fold", "Clap", "Exer", "Smoke", "M.I")]
# 進行多重對應分析
mca_model <- MCA(mca_data, quali.sup = 1)
# 提取 MCA 結果
mca_vars <- data.frame(mca_model$var$coord, Variable = rownames(mca_model$var$coord))
mca_inds <- data.frame(mca_model$ind$coord, Individual = rownames(mca_model$ind$coord))
# 繪製結果使用 ggplot2
ggplot() +
  geom_point(data = mca_inds, aes(x = Dim.1, y = Dim.2), color = "black", alpha = 0.5) +  # 個體點
  geom_point(data = mca_vars, aes(x = Dim.1, y = Dim.2), color = "red") +  # 變數點
  geom_text_repel(data = mca_vars, aes(x = Dim.1, y = Dim.2, label = Variable), color = "red") +  # 變數標籤
  geom_text_repel(data = mca_inds, aes(x = Dim.1, y = Dim.2, label = Individual), size = 2.5, color = "black") +  # 個體標籤
  labs(title = "MCA Factor Map", x = paste0("Dim 1 (", round(mca_model$eig[1, 2], 2), "%)"), 
       y = paste0("Dim 2 (", round(mca_model$eig[2, 2], 2), "%)")) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))
```

## Cluster Analysis

### K-means Clustering

資料集: iris

```{r}
# 載入必要的套件
library(ggplot2)
# 讀取 iris 資料集
data(iris)
# 去除 Species 類別變量
iris_data <- iris[, -5]
# K-means 聚類，設置 3 個群組
set.seed(123)
kmeans_model <- kmeans(iris_data, centers = 3)
# 創建一個包含群組的資料框
iris_data$Cluster <- as.factor(kmeans_model$cluster)
# 創建一個包含群組中心的資料框
centers_df <- as.data.frame(kmeans_model$centers)
centers_df$Cluster <- factor(1:3)
# 視覺化 K-means 聚類結果
ggplot(iris_data, aes(x = Petal.Length, y = Petal.Width, color = Cluster)) +
  geom_point(size = 3) + 
  # 顯示群組中心
  geom_point(data = centers_df, aes(x = Petal.Length, y = Petal.Width), 
             color = "black", size = 5, shape = 3) +
  # 添加標籤
  geom_text(data = centers_df, 
            aes(x = Petal.Length, y = Petal.Width, label = Cluster), 
            vjust = -1, color = "black") +
  labs(title = "K-means Clustering of Iris Data", 
       x = "Petal Length", y = "Petal Width") +
  theme_minimal()
```

### Hierarchical Clustering

資料集: mtcars

```{r}
# 讀取 mtcars 資料集
data(mtcars)
# 計算歐幾里德距離矩陣
dist_matrix <- dist(mtcars)
# 使用 Ward's 方法進行階層式聚類
hclust_model <- hclust(dist_matrix, method = "ward.D2")
# 繪製聚類樹狀圖
plot(hclust_model)

# 將觀測值分為 4 個群組
groups <- cutree(hclust_model, k = 4)
print(groups)  # 查看每個觀測值屬於哪個群組

# 將群組標籤加入原資料集
mtcars$group <- groups
# 計算每個群組的描述性統計量
aggregate(mtcars[, -ncol(mtcars)], by = list(Group = mtcars$group), FUN = mean)

library(ggplot2)
# 視覺化群組：以馬力（hp）和重量（wt）為例
ggplot(mtcars, aes(x = hp, y = wt, color = factor(group))) +
  geom_point(size = 3) +
  labs(title = "Cluster Visualization", x = "Horsepower", y = "Weight", color = "Group")
```

### DBSCAN (Density-Based Spatial Clustering of Applications with Noise)

資料集: iris

```{r}
library(dplyr)
library(ggplot2)
library(dbscan)
# 去除 Species 類別變量
iris_data <- iris[, -5]
# 使用 DBSCAN 進行聚類
dbscan_model <- dbscan(iris_data, eps = 0.5, minPts = 5)
# 創建一個包含結果的 dataframe
iris_dbscan <- data.frame(iris_data, Cluster = as.factor(dbscan_model$cluster))
# 計算每個集群的質心
centroids <- iris_dbscan %>%
  filter(Cluster != 0) %>%
  group_by(Cluster) %>%
  summarise(
    Petal.Length = mean(Petal.Length),
    Petal.Width = mean(Petal.Width)
  )
# 繪製 DBSCAN 聚類結果圖形
ggplot(iris_dbscan, aes(x = Petal.Length, y = Petal.Width, color = Cluster)) +
  geom_point(size = 3) +
  geom_point(data = centroids, aes(x = Petal.Length, y = Petal.Width), 
             color = "black", size = 4, shape = 8) +
  labs(title = "DBSCAN Clustering on Iris Data", 
       x = "Petal Length", y = "Petal Width") +
  theme_minimal() +
  theme(legend.position = "right")
```

